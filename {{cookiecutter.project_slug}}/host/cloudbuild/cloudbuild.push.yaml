
# Build, tag, and deploy all images / functions
steps:

  # Run vulnerability analysis with safety
  # ------------------------------------
  - name: python
    id: 'install-safety'
    entrypoint: pip
    args: ["install", "-r", "host/requirements.txt", "--user"]
  - name: python
    id: 'safety-check-app'
    entrypoint: python
    args: ["-m", "safety", "check", "-r", "app/requirements.txt", "--full-report"]
  - name: python
    id: 'safety-check-pub'
    entrypoint: python
    args: ["-m", "safety", "check", "-i", "39642", "-r", "publisher/requirements.txt", "--full-report"]
  - name: python
    id: 'safety-check-etl'
    entrypoint: python
    args: ["-m", "safety", "check", "-r", "etl/requirements.txt", "--full-report"]
  - name: 'bash'
    id: 'safety-passed'
    args: ['echo', 'python safety - no vulnerabilities found']

#   # Get secrets and model files
#   # ------------------------------------
# Integration client secrets
  - name: gcr.io/cloud-builders/gcloud
    id: 'client-integration-secrets'
    waitFor: [build-start]
    entrypoint: 'bash'
    args: [ '-c', "gcloud secrets versions access latest --secret=integration_env --format='get(payload.data)' | tr '_-' '/+' | base64 -d > client/.env.local" ]
# Integration api secrets
  - name: gcr.io/cloud-builders/gcloud
    id: 'integration-secrets'
    waitFor: [safety-passed]
    entrypoint: 'bash'
    args: [ '-c', "gcloud secrets versions access latest --secret=integration_env --format='get(payload.data)' | tr '_-' '/+' | base64 -d > local.env" ]


  # Build Docker-Compose environment
  # ------------------------------------
  # Docker-compose selenium standalone chrome env for running integration tests here.
  - name: 'gcr.io/$PROJECT_ID/docker-compose'
    id: 'build-docker'
    waitFor: [integration-secrets, client-integration-secrets]
    args: [
        '-f', 'docker-compose.yaml',
        '-f', 'docker-compose.integration.yaml',
        '--env-file', 'local.env',
        'build', '--parallel'
    ]
    env:
      - 'PROJECT_ID=$PROJECT_ID'

  # Run unit tests
  # ------------------------------------
  # unit-test-api
  - name: 'gcr.io/$PROJECT_ID/docker-compose'
    id: 'unit-test-api'
    waitFor: [build-docker]
    args: [
        '-f', 'docker-compose.yaml',
        '-f', 'docker-compose.integration.yaml',
      'run', '--rm',
      'host',
      'python', '-m', 'unittest', 'discover', '-s', 'tests.unit_tests'
    ]
    env:
      - 'PROJECT_ID=$PROJECT_ID'
  # unit-tests-passed
  - name: 'bash'
    id: 'unit-tests-passed'
    waitFor: [unit-test-api]
    args: ['echo', 'unit_tests - all tests passing!']

  # Take containers down after unit_tests
  # ------------------------------------
  - name: 'gcr.io/$PROJECT_ID/docker-compose'
    id: 'docker-down'
    waitFor: [unit-test-api]
    args: [
        '-f', 'docker-compose.yaml',
        '-f', 'docker-compose.integration.yaml',
        'down',
    ]
    env:
      - 'PROJECT_ID=$PROJECT_ID'

  # Build and run integration tests
  # ------------------------------------
  # Docker-compose selenium standalone chrome env for running integration tests here.
  - name: 'gcr.io/$PROJECT_ID/docker-compose'
    id: 'integration-tests'
    waitFor: [docker-down]
    args: [
        '-f', 'docker-compose.yaml',
        '-f', 'docker-compose.integration.yaml',
        '--env-file', 'local.env',
        'run',
        '-e', 'TEST_PARALLEL=True',
        'host',
        'unittest-parallel', '-s', 'tests/integration_tests', '-t', '.', '-vvv'
    ]
    env:
      - 'PROJECT_ID=$PROJECT_ID'
  - name: 'bash'
    id: 'integration-tests-passed'
    args: ['echo', 'integration_tests - all tests passing!']

#   # Pull caches and build all images (in parallel with tests)
#   # ------------------------------------
# private client deploy - secret
  - name: gcr.io/cloud-builders/gcloud
    id: 'client-private-build-secrets'
    waitFor: [build-docker]
    entrypoint: 'bash'
    args: [ '-c', "gcloud secrets versions access latest --secret=${_CLIENT_STAGING_SECRET} --format='get(payload.data)' | tr '_-' '/+' | base64 -d > client/.env.local" ]
#   private client deploy - build
  - name: 'gcr.io/$PROJECT_ID/docker-compose'
    id: 'build-client-private-deploy'
    waitFor: [client-private-build-secrets]
    entrypoint: ./host/cloudbuild/build.sh
    args: ["client", "$PROJECT_ID", "staging", "client"]
#   api and host images
  - name: 'gcr.io/$PROJECT_ID/docker-compose'
    id: 'build-api'
    waitFor: [build-docker]
    entrypoint: ./host/cloudbuild/build.sh
    args: ["api", "$PROJECT_ID", "staging", "api"]
  - name: 'gcr.io/$PROJECT_ID/docker-compose'
    id: 'build-host'
    waitFor: [build-docker]
    entrypoint: ./host/cloudbuild/build.sh
    args: ["host", "$PROJECT_ID", "staging", "host"]


  # Tag and push deploy images
  # ------------------------------------
  - name: gcr.io/cloud-builders/docker
    id: 'api-deploy-push'
    waitFor: [build-api]
    entrypoint: ./host/cloudbuild/push_tag.sh
    args: ["api", "staging", "$PROJECT_ID", "staging"]
  # client private
  - name: gcr.io/cloud-builders/docker
    id: 'client-deploy-push-private'
    waitFor: [build-client-private-deploy]
    entrypoint: ./host/cloudbuild/push_tag.sh
    args: ["client", "staging", "$PROJECT_ID", "staging"]
  # host
  - name: gcr.io/cloud-builders/docker
    id: 'host-deploy-push'
    waitFor: [build-host]
    entrypoint: ./host/cloudbuild/push_tag.sh
    args: ["host", "staging", "$PROJECT_ID", "staging"]


  # Deploy to Cloud Run staging
  # ------------------------------------
  # api - private
  - name: gcr.io/cloud-builders/gcloud
    id: 'api-staging-deploy'
    waitFor: [integration-tests-passed]
    entrypoint: ./host/cloudbuild/deploy_api_run.sh
    args: ["api", "staging", "$PROJECT_ID", "staging"]
  # client private
  - name: gcr.io/cloud-builders/gcloud
    id: 'client-staging-private-deploy'
    waitFor: [integration-tests-passed]
    entrypoint: ./host/cloudbuild/deploy_client_run.sh
    args: ["client", "staging", "$PROJECT_ID", "staging"]


#   # Deploy to Cloud Functions staging
#   # ------------------------------------
#   - name: gcr.io/cloud-builders/gcloud
#     id: 'etl-lake-staging-deploy'
#     waitFor: [integration-tests-passed]
#     entrypoint: ./host/deploy_function.sh
#     args: ["etl-lake", "staging", "push_to_lake"]
#   - name: gcr.io/cloud-builders/gcloud
#     id: 'etl-warehouse-staging-deploy'
#     waitFor: [integration-tests-passed]
#     entrypoint: ./host/deploy_function.sh
#     args: ["etl-warehouse", "staging", "push_to_warehouse"]


  # Run Acceptance tests against staging
  # -------------------------------------------
  - name: 'gcr.io/$PROJECT_ID/docker-compose'
    id: 'acceptance-tests'
    args: [
        '-f', 'docker-compose.yaml',
        '-f', 'docker-compose.integration.yaml',
        'run',
        '-e', 'SERVER_URL=${_SERVER_STAGING_URL}',
        '-e', 'TEST_PARALLEL=True',
        'host',
        'unittest-parallel', '-s', 'tests/acceptance_tests', '-t', '.', '-vvv'
    ]
    env:
      - 'PROJECT_ID=$PROJECT_ID'
  - name: 'bash'
    id: 'acceptance-tests-passed'
    args: ['echo', 'acceptance_tests - all tests passing!']


  # Deploy to Cloud Run prod
  # ------------------------------------
  # client - prod
  - name: gcr.io/cloud-builders/gcloud
    id: 'client-prod-secrets'
    waitFor: [acceptance-tests-passed]
    entrypoint: 'bash'
    args: [ '-c', "gcloud secrets versions access latest --secret=${_CLIENT_PROD_SECRET} --format='get(payload.data)' | tr '_-' '/+' | base64 -d > client/.env.local" ]
  - name: 'gcr.io/$PROJECT_ID/docker-compose'
    id: 'build-client-prod'
    entrypoint: ./host/cloudbuild/build.sh
    args: ["client", "$PROJECT_ID", "prod", "client"]
    waitFor: [client-prod-secrets]
  - name: gcr.io/cloud-builders/docker
    id: 'client-prod-push'
    waitFor: [build-client-prod]
    entrypoint: ./host/cloudbuild/push_tag.sh
    args: ["client", "prod", "$PROJECT_ID", "prod"]
  - name: gcr.io/cloud-builders/gcloud
    id: 'client-prod-deploy'
    waitFor: [client-prod-push]
    entrypoint: ./host/cloudbuild/deploy_client_run.sh
    args: ["client", "prod", "$PROJECT_ID", "prod"]
  # api - prod
  - name: gcr.io/cloud-builders/docker
    id: 'api-prod-push'
    waitFor: [acceptance-tests-passed]
    entrypoint: ./host/cloudbuild/push_tag.sh
    args: ["api", "prod", "$PROJECT_ID", "prod"]
  - name: gcr.io/cloud-builders/gcloud
    id: 'api-prod-deploy'
    waitFor: [api-prod-push]
    entrypoint: ./host/cloudbuild/deploy_api_run.sh
    args: ["api", "prod", "$PROJECT_ID", "prod"]
  # host - prod
  - name: gcr.io/cloud-builders/docker
    id: 'host-prod-push'
    waitFor: [acceptance-tests-passed]
    entrypoint: ./host/cloudbuild/push_tag.sh
    args: ["host", "prod", "$PROJECT_ID", "prod"]


#   # Monitor the build with Slack
#   # ------------------------------------
#   - name: 'gcr.io/$PROJECT_ID/slackbot'
#     id: 'slackbot-start'
#     args: [ '--build', '$BUILD_ID',
#             '--webhook', '$_SLACK_WEBHOOK', '--copy-timeout' ]


  # Run Smoke tests against prod
  # -------------------------------------------
  - name: 'gcr.io/$PROJECT_ID/docker-compose'
    id: 'smoke-tests'
    waitFor: [api-prod-deploy, client-prod-deploy]
    args: [
        '-f', 'docker-compose.yaml',
        '-f', 'docker-compose.integration.yaml',
        'run',
        '-e', 'SERVER_URL=${_SERVER_PROD_URL}',
        '-e', 'TEST_PARALLEL=True',
        'host',
        'unittest-parallel', '-s', 'tests/smoke_tests', '-t', '.', '-vvv'
    ]
    env:
      - 'PROJECT_ID=$PROJECT_ID'
  - name: 'bash'
    id: 'smoke-tests-passed'
    args: ['echo', 'smoke_tests - all tests passing!']


#   # Deploy to Cloud Functions prod
#   # ------------------------------------
#   - name: gcr.io/cloud-builders/gcloud
#     id: 'etl-lake-prod-deploy'
#     waitFor: [acceptance-tests-passed]
#     entrypoint: ./host/deploy_function.sh
#     args: ["etl-lake", "prod", "push_to_lake"]
#   - name: gcr.io/cloud-builders/gcloud
#     id: 'etl-warehouse-prod-deploy'
#     waitFor: [acceptance-tests-passed]
#     entrypoint: ./host/deploy_function.sh
#     args: ["etl-warehouse", "prod", "push_to_warehouse"]


options:
  machineType: 'N1_HIGHCPU_8'

timeout: 3800s
